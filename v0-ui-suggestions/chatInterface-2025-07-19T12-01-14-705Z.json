{
  "component": "chatInterface",
  "prompt": "Create a WhatsApp-style chat interface component.\n\nHEADER:\n- Group name and member count\n- Back button (mobile only)\n- Connection indicator dot\n- Fixed top position\n\nMESSAGE AREA:\n- Scrollable with auto-scroll to bottom\n- Message bubbles:\n  - Own messages: right-aligned, primary color bg\n  - Others: left-aligned, muted bg\n  - Sender name above message (others only)\n  - Time below message (e.g., \"2:34 PM\")\n  - Max width 80% on mobile, 60% on desktop\n- Date separators (e.g., \"Today\", \"Yesterday\")\n- Loading skeleton for pending messages\n- Smooth scroll behavior\n\nMESSAGE INPUT:\n- Sticky bottom with safe area padding\n- Text input with placeholder \"Type a message...\"\n- Auto-resize up to 4 lines\n- Send button (arrow icon) - disabled when empty\n- Character counter if > 500 chars\n\nMOBILE OPTIMIZATIONS:\n- Touch-friendly (44px targets)\n- Keyboard-aware positioning\n- Pull down to load older messages\n\nProps:\ninterface ChatInterfaceProps {\n  group: { id: number; name: string; memberCount: number };\n  messages: Message[];\n  currentUserId: string;\n  onSendMessage: (content: string) => void;\n  onBack?: () => void;\n  isLoading?: boolean;\n}\n\ninterface Message {\n  id: string;\n  content: string;\n  senderId: string;\n  senderName: string;\n  createdAt: Date;\n  status?: 'sending' | 'sent' | 'delivered' | 'read';\n}\n\nUse shadcn/ui (Input, Button, ScrollArea, Avatar), TypeScript, Tailwind CSS.",
  "response": {
    "id": "v0-LgNrp64BgUuAvdXIrfH2XHt3xOFiddbW",
    "object": "chat.completion",
    "created": 1752926474,
    "model": "v0-1.5-md",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "content": "<Thinking>\nI need to create a WhatsApp-style chat interface component with the following requirements:\n\n1. Header with group name, member count, back button (mobile only), connection indicator, fixed top\n2. Message area with scrollable messages, auto-scroll to bottom, message bubbles with different styles for own/others, date separators, loading skeleton\n3. Message input with auto-resize, send button, character counter\n4. Mobile optimizations\n5. Use shadcn/ui components, TypeScript, Tailwind CSS\n\nLet me break this down:\n\n1. I'll need to create the main ChatInterface component\n2. I'll need separate components for:\n   - ChatHeader\n   - MessageArea with MessageBubble and DateSeparator\n   - MessageInput\n3. I'll use shadcn/ui components like Input, Button, ScrollArea, Avatar\n4. I'll need to handle auto-scroll, auto-resize textarea, character counting\n5. I'll need to make it responsive and mobile-friendly\n\nLet me structure this properly:\n\n1. Main ChatInterface component\n2. ChatHeader component\n3. MessageArea component with MessageBubble and DateSeparator\n4. MessageInput component\n5. Proper TypeScript interfaces\n6. Mobile-first responsive design\n7. Accessibility considerations\n\nI'll need to use \"use client\" since this will have interactive elements like useState, useEffect, useRef.\n\nFor the auto-scroll functionality, I'll use useRef and useEffect.\nFor the auto-resize textarea, I'll use useRef and handle the resize logic.\nFor date formatting, I'll create utility functions.\nFor the loading skeleton, I'll create a simple skeleton component.\n\nLet me start coding this step by step.\n</Thinking>\n\nI'll create a comprehensive WhatsApp-style chat interface with all the features you requested. Let me build this with proper component separation and mobile optimization.\n\n```tsx file=\"components/chat-interface.tsx\"\n'use client'\n\nimport React, { useState, useRef, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar'\nimport { ArrowLeft, Send, Circle } from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\ninterface Message {\n  id: string\n  content: string\n  senderId: string\n  senderName: string\n  createdAt: Date\n  status?: 'sending' | 'sent' | 'delivered' | 'read'\n}\n\ninterface ChatInterfaceProps {\n  group: { id: number; name: string; memberCount: number }\n  messages: Message[]\n  currentUserId: string\n  onSendMessage: (content: string) => void\n  onBack?: () => void\n  isLoading?: boolean\n}\n\n// Utility functions\nconst formatTime = (date: Date) => {\n  return date.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  })\n}\n\nconst formatDateSeparator = (date: Date) => {\n  const today = new Date()\n  const yesterday = new Date(today)\n  yesterday.setDate(yesterday.getDate() - 1)\n  \n  if (date.toDateString() === today.toDateString()) {\n    return 'Today'\n  } else if (date.toDateString() === yesterday.toDateString()) {\n    return 'Yesterday'\n  } else {\n    return date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  }\n}\n\nconst shouldShowDateSeparator = (currentMessage: Message, previousMessage?: Message) => {\n  if (!previousMessage) return true\n  \n  const currentDate = new Date(currentMessage.createdAt).toDateString()\n  const previousDate = new Date(previousMessage.createdAt).toDateString()\n  \n  return currentDate !== previousDate\n}\n\n// Loading skeleton component\nconst MessageSkeleton = () => (\n  <div className=\"flex items-start gap-2 mb-4\">\n    <div className=\"w-8 h-8 bg-muted rounded-full animate-pulse\" />\n    <div className=\"flex-1 max-w-[80%] md:max-w-[60%]\">\n      <div className=\"h-3 bg-muted rounded animate-pulse mb-2 w-20\" />\n      <div className=\"bg-muted rounded-lg p-3 animate-pulse\">\n        <div className=\"h-4 bg-muted-foreground/20 rounded mb-2\" />\n        <div className=\"h-4 bg-muted-foreground/20 rounded w-3/4\" />\n      </div>\n    </div>\n  </div>\n)\n\n// Date separator component\nconst DateSeparator = ({ date }: { date: Date }) => (\n  <div className=\"flex items-center justify-center my-4\">\n    <div className=\"bg-muted px-3 py-1 rounded-full text-xs text-muted-foreground\">\n      {formatDateSeparator(date)}\n    </div>\n  </div>\n)\n\n// Message bubble component\nconst MessageBubble = ({ \n  message, \n  isOwn, \n  showSender \n}: { \n  message: Message\n  isOwn: boolean\n  showSender: boolean\n}) => {\n  const getStatusIcon = () => {\n    switch (message.status) {\n      case 'sending':\n        return <Circle className=\"w-3 h-3 text-muted-foreground animate-pulse\" />\n      case 'sent':\n        return <div className=\"w-3 h-3 text-muted-foreground\">✓</div>\n      case 'delivered':\n        return <div className=\"w-3 h-3 text-muted-foreground\">✓✓</div>\n      case 'read':\n        return <div className=\"w-3 h-3 text-blue-500\">✓✓</div>\n      default:\n        return null\n    }\n  }\n\n  return (\n    <div className={cn(\n      \"flex mb-4 max-w-[80%] md:max-w-[60%]\",\n      isOwn ? \"ml-auto\" : \"mr-auto\"\n    )}>\n      {!isOwn && (\n        <Avatar className=\"w-8 h-8 mr-2 flex-shrink-0\">\n          <AvatarFallback className=\"text-xs\">\n            {message.senderName.charAt(0).toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n      )}\n      \n      <div className={cn(\"flex flex-col\", isOwn && \"items-end\")}>\n        {!isOwn && showSender && (\n          <span className=\"text-xs text-muted-foreground mb-1 px-1\">\n            {message.senderName}\n          </span>\n        )}\n        \n        <div className={cn(\n          \"rounded-lg px-3 py-2 break-words\",\n          isOwn \n            ? \"bg-primary text-primary-foreground\" \n            : \"bg-muted\"\n        )}>\n          <p className=\"text-sm leading-relaxed\">{message.content}</p>\n        </div>\n        \n        <div className={cn(\n          \"flex items-center gap-1 mt-1 px-1\",\n          isOwn ? \"flex-row-reverse\" : \"flex-row\"\n        )}>\n          <span className=\"text-xs text-muted-foreground\">\n            {formatTime(message.createdAt)}\n          </span>\n          {isOwn && getStatusIcon()}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Chat header component\nconst ChatHeader = ({ \n  group, \n  onBack, \n  isConnected = true \n}: { \n  group: { name: string; memberCount: number }\n  onBack?: () => void\n  isConnected?: boolean\n}) => (\n  <div className=\"flex items-center gap-3 p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-10\">\n    {onBack && (\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={onBack}\n        className=\"md:hidden p-2 h-auto\"\n      >\n        <ArrowLeft className=\"w-5 h-5\" />\n        <span className=\"sr-only\">Go back</span>\n      </Button>\n    )}\n    \n    <Avatar className=\"w-10 h-10\">\n      <AvatarFallback>\n        {group.name.charAt(0).toUpperCase()}\n      </AvatarFallback>\n    </Avatar>\n    \n    <div className=\"flex-1 min-w-0\">\n      <h1 className=\"font-semibold text-sm truncate\">{group.name}</h1>\n      <div className=\"flex items-center gap-2\">\n        <div className={cn(\n          \"w-2 h-2 rounded-full\",\n          isConnected ? \"bg-green-500\" : \"bg-red-500\"\n        )} />\n        <span className=\"text-xs text-muted-foreground\">\n          {group.memberCount} members\n        </span>\n      </div>\n    </div>\n  </div>\n)\n\n// Message input component\nconst MessageInput = ({ \n  onSendMessage, \n  disabled = false \n}: { \n  onSendMessage: (content: string) => void\n  disabled?: boolean\n}) => {\n  const [message, setMessage] = useState('')\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n  \n  const adjustTextareaHeight = () => {\n    const textarea = textareaRef.current\n    if (textarea) {\n      textarea.style.height = 'auto'\n      const scrollHeight = textarea.scrollHeight\n      const maxHeight = 4 * 24 // 4 lines * line height\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`\n    }\n  }\n  \n  useEffect(() => {\n    adjustTextareaHeight()\n  }, [message])\n  \n  const handleSend = () => {\n    if (message.trim() && !disabled) {\n      onSendMessage(message.trim())\n      setMessage('')\n    }\n  }\n  \n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSend()\n    }\n  }\n  \n  const charCount = message.length\n  const showCharCount = charCount > 500\n  \n  return (\n    <div className=\"border-t bg-background p-4 pb-safe\">\n      {showCharCount && (\n        <div className=\"text-xs text-muted-foreground mb-2 text-right\">\n          {charCount}/1000\n        </div>\n      )}\n      \n      <div className=\"flex items-end gap-2\">\n        <div className=\"flex-1 relative\">\n          <textarea\n            ref={textareaRef}\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type a message...\"\n            disabled={disabled}\n            maxLength={1000}\n            className=\"w-full resize-none rounded-lg border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 min-h-[40px] max-h-24\"\n            rows={1}\n          />\n        </div>\n        \n        <Button\n          onClick={handleSend}\n          disabled={!message.trim() || disabled}\n          size=\"sm\"\n          className=\"h-10 w-10 rounded-full p-0 flex-shrink-0\"\n        >\n          <Send className=\"w-4 h-4\" />\n          <span className=\"sr-only\">Send message</span>\n        </Button>\n      </div>\n    </div>\n  )\n}\n\n// Main chat interface component\nexport default function ChatInterface({\n  group,\n  messages,\n  currentUserId,\n  onSendMessage,\n  onBack,\n  isLoading = false\n}: ChatInterfaceProps) {\n  const scrollAreaRef = useRef<HTMLDivElement>(null)\n  const [isAtBottom, setIsAtBottom] = useState(true)\n  \n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (isAtBottom && scrollAreaRef.current) {\n      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]')\n      if (scrollContainer) {\n        scrollContainer.scrollTop = scrollContainer.scrollHeight\n      }\n    }\n  }, [messages, isAtBottom])\n  \n  // Check if user is at bottom of scroll area\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget\n    const threshold = 100\n    setIsAtBottom(scrollHeight - scrollTop - clientHeight < threshold)\n  }\n  \n  return (\n    <div className=\"flex flex-col h-screen max-h-screen bg-background\">\n      <ChatHeader group={group} onBack={onBack} />\n      \n      <ScrollArea \n        ref={scrollAreaRef}\n        className=\"flex-1 px-4\"\n        onScrollCapture={handleScroll}\n      >\n        <div className=\"py-4\">\n          {messages.map((message, index) => {\n            const previousMessage = index > 0 ? messages[index - 1] : undefined\n            const showDateSeparator = shouldShowDateSeparator(message, previousMessage)\n            const isOwn = message.senderId === currentUserId\n            const showSender = !isOwn && (\n              !previousMessage || \n              previousMessage.senderId !== message.senderId ||\n              shouldShowDateSeparator(message, previousMessage)\n            )\n            \n            return (\n              <React.Fragment key={message.id}>\n                {showDateSeparator && <DateSeparator date={message.createdAt} />}\n                <MessageBubble\n                  message={message}\n                  isOwn={isOwn}\n                  showSender={showSender}\n                />\n              </React.Fragment>\n            )\n          })}\n          \n          {isLoading && (\n            <>\n              <MessageSkeleton />\n              <MessageSkeleton />\n            </>\n          )}\n        </div>\n      </ScrollArea>\n      \n      <MessageInput onSendMessage={onSendMessage} disabled={isLoading} />\n    </div>\n  )\n}\n```\n\n```tsx file=\"app/chat/page.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport ChatInterface from '@/components/chat-interface'\n\n// Sample data for demonstration\nconst sampleGroup = {\n  id: 1,\n  name: 'Team Discussion',\n  memberCount: 8\n}\n\nconst sampleMessages = [\n  {\n    id: '1',\n    content: 'Hey everyone! How are the project updates coming along?',\n    senderId: 'user2',\n    senderName: 'Alice Johnson',\n    createdAt: new Date(Date.now() - 86400000), // Yesterday\n    status: 'read' as const\n  },\n  {\n    id: '2',\n    content: 'Making good progress on the frontend components. Should have the first draft ready by tomorrow.',\n    senderId: 'current-user',\n    senderName: '"
        },
        "finish_reason": "stop"
      }
    ],
    "usage": {
      "prompt_tokens": 6692,
      "completion_tokens": 4000,
      "total_tokens": 10692,
      "prompt_tokens_details": {
        "cached_tokens": 0,
        "audio_tokens": 0
      },
      "completion_tokens_details": {
        "reasoning_tokens": 0,
        "audio_tokens": 0,
        "accepted_prediction_tokens": 0,
        "rejected_prediction_tokens": 0
      }
    },
    "service_tier": "default",
    "system_fingerprint": "fp-iaqeayQf2Dz8anaK6nQanwARKdpLs6kE"
  },
  "code": "<Thinking>\nI need to create a WhatsApp-style chat interface component with the following requirements:\n\n1. Header with group name, member count, back button (mobile only), connection indicator, fixed top\n2. Message area with scrollable messages, auto-scroll to bottom, message bubbles with different styles for own/others, date separators, loading skeleton\n3. Message input with auto-resize, send button, character counter\n4. Mobile optimizations\n5. Use shadcn/ui components, TypeScript, Tailwind CSS\n\nLet me break this down:\n\n1. I'll need to create the main ChatInterface component\n2. I'll need separate components for:\n   - ChatHeader\n   - MessageArea with MessageBubble and DateSeparator\n   - MessageInput\n3. I'll use shadcn/ui components like Input, Button, ScrollArea, Avatar\n4. I'll need to handle auto-scroll, auto-resize textarea, character counting\n5. I'll need to make it responsive and mobile-friendly\n\nLet me structure this properly:\n\n1. Main ChatInterface component\n2. ChatHeader component\n3. MessageArea component with MessageBubble and DateSeparator\n4. MessageInput component\n5. Proper TypeScript interfaces\n6. Mobile-first responsive design\n7. Accessibility considerations\n\nI'll need to use \"use client\" since this will have interactive elements like useState, useEffect, useRef.\n\nFor the auto-scroll functionality, I'll use useRef and useEffect.\nFor the auto-resize textarea, I'll use useRef and handle the resize logic.\nFor date formatting, I'll create utility functions.\nFor the loading skeleton, I'll create a simple skeleton component.\n\nLet me start coding this step by step.\n</Thinking>\n\nI'll create a comprehensive WhatsApp-style chat interface with all the features you requested. Let me build this with proper component separation and mobile optimization.\n\n```tsx file=\"components/chat-interface.tsx\"\n'use client'\n\nimport React, { useState, useRef, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar'\nimport { ArrowLeft, Send, Circle } from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\ninterface Message {\n  id: string\n  content: string\n  senderId: string\n  senderName: string\n  createdAt: Date\n  status?: 'sending' | 'sent' | 'delivered' | 'read'\n}\n\ninterface ChatInterfaceProps {\n  group: { id: number; name: string; memberCount: number }\n  messages: Message[]\n  currentUserId: string\n  onSendMessage: (content: string) => void\n  onBack?: () => void\n  isLoading?: boolean\n}\n\n// Utility functions\nconst formatTime = (date: Date) => {\n  return date.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  })\n}\n\nconst formatDateSeparator = (date: Date) => {\n  const today = new Date()\n  const yesterday = new Date(today)\n  yesterday.setDate(yesterday.getDate() - 1)\n  \n  if (date.toDateString() === today.toDateString()) {\n    return 'Today'\n  } else if (date.toDateString() === yesterday.toDateString()) {\n    return 'Yesterday'\n  } else {\n    return date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  }\n}\n\nconst shouldShowDateSeparator = (currentMessage: Message, previousMessage?: Message) => {\n  if (!previousMessage) return true\n  \n  const currentDate = new Date(currentMessage.createdAt).toDateString()\n  const previousDate = new Date(previousMessage.createdAt).toDateString()\n  \n  return currentDate !== previousDate\n}\n\n// Loading skeleton component\nconst MessageSkeleton = () => (\n  <div className=\"flex items-start gap-2 mb-4\">\n    <div className=\"w-8 h-8 bg-muted rounded-full animate-pulse\" />\n    <div className=\"flex-1 max-w-[80%] md:max-w-[60%]\">\n      <div className=\"h-3 bg-muted rounded animate-pulse mb-2 w-20\" />\n      <div className=\"bg-muted rounded-lg p-3 animate-pulse\">\n        <div className=\"h-4 bg-muted-foreground/20 rounded mb-2\" />\n        <div className=\"h-4 bg-muted-foreground/20 rounded w-3/4\" />\n      </div>\n    </div>\n  </div>\n)\n\n// Date separator component\nconst DateSeparator = ({ date }: { date: Date }) => (\n  <div className=\"flex items-center justify-center my-4\">\n    <div className=\"bg-muted px-3 py-1 rounded-full text-xs text-muted-foreground\">\n      {formatDateSeparator(date)}\n    </div>\n  </div>\n)\n\n// Message bubble component\nconst MessageBubble = ({ \n  message, \n  isOwn, \n  showSender \n}: { \n  message: Message\n  isOwn: boolean\n  showSender: boolean\n}) => {\n  const getStatusIcon = () => {\n    switch (message.status) {\n      case 'sending':\n        return <Circle className=\"w-3 h-3 text-muted-foreground animate-pulse\" />\n      case 'sent':\n        return <div className=\"w-3 h-3 text-muted-foreground\">✓</div>\n      case 'delivered':\n        return <div className=\"w-3 h-3 text-muted-foreground\">✓✓</div>\n      case 'read':\n        return <div className=\"w-3 h-3 text-blue-500\">✓✓</div>\n      default:\n        return null\n    }\n  }\n\n  return (\n    <div className={cn(\n      \"flex mb-4 max-w-[80%] md:max-w-[60%]\",\n      isOwn ? \"ml-auto\" : \"mr-auto\"\n    )}>\n      {!isOwn && (\n        <Avatar className=\"w-8 h-8 mr-2 flex-shrink-0\">\n          <AvatarFallback className=\"text-xs\">\n            {message.senderName.charAt(0).toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n      )}\n      \n      <div className={cn(\"flex flex-col\", isOwn && \"items-end\")}>\n        {!isOwn && showSender && (\n          <span className=\"text-xs text-muted-foreground mb-1 px-1\">\n            {message.senderName}\n          </span>\n        )}\n        \n        <div className={cn(\n          \"rounded-lg px-3 py-2 break-words\",\n          isOwn \n            ? \"bg-primary text-primary-foreground\" \n            : \"bg-muted\"\n        )}>\n          <p className=\"text-sm leading-relaxed\">{message.content}</p>\n        </div>\n        \n        <div className={cn(\n          \"flex items-center gap-1 mt-1 px-1\",\n          isOwn ? \"flex-row-reverse\" : \"flex-row\"\n        )}>\n          <span className=\"text-xs text-muted-foreground\">\n            {formatTime(message.createdAt)}\n          </span>\n          {isOwn && getStatusIcon()}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Chat header component\nconst ChatHeader = ({ \n  group, \n  onBack, \n  isConnected = true \n}: { \n  group: { name: string; memberCount: number }\n  onBack?: () => void\n  isConnected?: boolean\n}) => (\n  <div className=\"flex items-center gap-3 p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-10\">\n    {onBack && (\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={onBack}\n        className=\"md:hidden p-2 h-auto\"\n      >\n        <ArrowLeft className=\"w-5 h-5\" />\n        <span className=\"sr-only\">Go back</span>\n      </Button>\n    )}\n    \n    <Avatar className=\"w-10 h-10\">\n      <AvatarFallback>\n        {group.name.charAt(0).toUpperCase()}\n      </AvatarFallback>\n    </Avatar>\n    \n    <div className=\"flex-1 min-w-0\">\n      <h1 className=\"font-semibold text-sm truncate\">{group.name}</h1>\n      <div className=\"flex items-center gap-2\">\n        <div className={cn(\n          \"w-2 h-2 rounded-full\",\n          isConnected ? \"bg-green-500\" : \"bg-red-500\"\n        )} />\n        <span className=\"text-xs text-muted-foreground\">\n          {group.memberCount} members\n        </span>\n      </div>\n    </div>\n  </div>\n)\n\n// Message input component\nconst MessageInput = ({ \n  onSendMessage, \n  disabled = false \n}: { \n  onSendMessage: (content: string) => void\n  disabled?: boolean\n}) => {\n  const [message, setMessage] = useState('')\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n  \n  const adjustTextareaHeight = () => {\n    const textarea = textareaRef.current\n    if (textarea) {\n      textarea.style.height = 'auto'\n      const scrollHeight = textarea.scrollHeight\n      const maxHeight = 4 * 24 // 4 lines * line height\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`\n    }\n  }\n  \n  useEffect(() => {\n    adjustTextareaHeight()\n  }, [message])\n  \n  const handleSend = () => {\n    if (message.trim() && !disabled) {\n      onSendMessage(message.trim())\n      setMessage('')\n    }\n  }\n  \n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSend()\n    }\n  }\n  \n  const charCount = message.length\n  const showCharCount = charCount > 500\n  \n  return (\n    <div className=\"border-t bg-background p-4 pb-safe\">\n      {showCharCount && (\n        <div className=\"text-xs text-muted-foreground mb-2 text-right\">\n          {charCount}/1000\n        </div>\n      )}\n      \n      <div className=\"flex items-end gap-2\">\n        <div className=\"flex-1 relative\">\n          <textarea\n            ref={textareaRef}\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type a message...\"\n            disabled={disabled}\n            maxLength={1000}\n            className=\"w-full resize-none rounded-lg border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 min-h-[40px] max-h-24\"\n            rows={1}\n          />\n        </div>\n        \n        <Button\n          onClick={handleSend}\n          disabled={!message.trim() || disabled}\n          size=\"sm\"\n          className=\"h-10 w-10 rounded-full p-0 flex-shrink-0\"\n        >\n          <Send className=\"w-4 h-4\" />\n          <span className=\"sr-only\">Send message</span>\n        </Button>\n      </div>\n    </div>\n  )\n}\n\n// Main chat interface component\nexport default function ChatInterface({\n  group,\n  messages,\n  currentUserId,\n  onSendMessage,\n  onBack,\n  isLoading = false\n}: ChatInterfaceProps) {\n  const scrollAreaRef = useRef<HTMLDivElement>(null)\n  const [isAtBottom, setIsAtBottom] = useState(true)\n  \n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (isAtBottom && scrollAreaRef.current) {\n      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]')\n      if (scrollContainer) {\n        scrollContainer.scrollTop = scrollContainer.scrollHeight\n      }\n    }\n  }, [messages, isAtBottom])\n  \n  // Check if user is at bottom of scroll area\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget\n    const threshold = 100\n    setIsAtBottom(scrollHeight - scrollTop - clientHeight < threshold)\n  }\n  \n  return (\n    <div className=\"flex flex-col h-screen max-h-screen bg-background\">\n      <ChatHeader group={group} onBack={onBack} />\n      \n      <ScrollArea \n        ref={scrollAreaRef}\n        className=\"flex-1 px-4\"\n        onScrollCapture={handleScroll}\n      >\n        <div className=\"py-4\">\n          {messages.map((message, index) => {\n            const previousMessage = index > 0 ? messages[index - 1] : undefined\n            const showDateSeparator = shouldShowDateSeparator(message, previousMessage)\n            const isOwn = message.senderId === currentUserId\n            const showSender = !isOwn && (\n              !previousMessage || \n              previousMessage.senderId !== message.senderId ||\n              shouldShowDateSeparator(message, previousMessage)\n            )\n            \n            return (\n              <React.Fragment key={message.id}>\n                {showDateSeparator && <DateSeparator date={message.createdAt} />}\n                <MessageBubble\n                  message={message}\n                  isOwn={isOwn}\n                  showSender={showSender}\n                />\n              </React.Fragment>\n            )\n          })}\n          \n          {isLoading && (\n            <>\n              <MessageSkeleton />\n              <MessageSkeleton />\n            </>\n          )}\n        </div>\n      </ScrollArea>\n      \n      <MessageInput onSendMessage={onSendMessage} disabled={isLoading} />\n    </div>\n  )\n}\n```\n\n```tsx file=\"app/chat/page.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport ChatInterface from '@/components/chat-interface'\n\n// Sample data for demonstration\nconst sampleGroup = {\n  id: 1,\n  name: 'Team Discussion',\n  memberCount: 8\n}\n\nconst sampleMessages = [\n  {\n    id: '1',\n    content: 'Hey everyone! How are the project updates coming along?',\n    senderId: 'user2',\n    senderName: 'Alice Johnson',\n    createdAt: new Date(Date.now() - 86400000), // Yesterday\n    status: 'read' as const\n  },\n  {\n    id: '2',\n    content: 'Making good progress on the frontend components. Should have the first draft ready by tomorrow.',\n    senderId: 'current-user',\n    senderName: '",
  "timestamp": "2025-07-19T12:01:14.708Z"
}