{
  "component": "messagingDashboard",
  "prompt": "Create a comprehensive messaging dashboard for an employee directory PWA.\n\nLAYOUT:\n- Desktop: Split view with 1/3 groups list, 2/3 chat area\n- Mobile: Full screen views with navigation\n- Header with connection status and create group button\n\nGROUPS LIST:\n- Group cards showing:\n  - Group name and member count badge\n  - Last message preview (max 2 lines)\n  - Unread count badge (if > 0)\n  - Time ago (e.g., \"2m\", \"1h\", \"Yesterday\")\n  - Group avatar with fallback initials\n- Search/filter input at top\n- Loading skeletons\n- Empty state: \"No groups yet\"\n\nCONNECTION STATUS:\n- Green dot + \"Connected\" when online\n- Yellow dot + \"Connecting...\" when connecting\n- Red dot + \"Offline\" when disconnected\n- Minimal height, subtle styling\n\nCHAT AREA:\n- Show selected group's chat or placeholder\n- \"Select a group to start chatting\" when none selected\n\nProps:\ninterface MessagingDashboardProps {\n  groups: Group[];\n  selectedGroupId?: number;\n  connectionStatus: { connected: boolean; authenticated: boolean };\n  onGroupSelect: (group: Group) => void;\n  onCreateGroup: () => void;\n  currentUserId: string;\n}\n\ninterface Group {\n  id: number;\n  name: string;\n  memberCount: number;\n  lastMessage?: string;\n  lastMessageTime?: Date;\n  unreadCount: number;\n}\n\nUse shadcn/ui (Card, Input, Badge, ScrollArea, Skeleton), TypeScript, Tailwind CSS. Mobile-first responsive design.",
  "response": {
    "id": "v0-S8gU5qekguXol9CkdzL6GsqhqrMAKO7u",
    "object": "chat.completion",
    "created": 1752926402,
    "model": "v0-1.5-md",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "content": "<Thinking>\nI need to create a comprehensive messaging dashboard for an employee directory PWA. Let me break down the requirements:\n\n1. **Layout**: \n   - Desktop: Split view (1/3 groups list, 2/3 chat area)\n   - Mobile: Full screen views with navigation\n   - Header with connection status and create group button\n\n2. **Groups List**:\n   - Group cards with name, member count badge, last message preview (max 2 lines), unread count badge, time ago, group avatar with fallback initials\n   - Search/filter input at top\n   - Loading skeletons\n   - Empty state\n\n3. **Connection Status**:\n   - Green dot + \"Connected\" when online\n   - Yellow dot + \"Connecting...\" when connecting  \n   - Red dot + \"Offline\" when disconnected\n   - Minimal height, subtle styling\n\n4. **Chat Area**:\n   - Show selected group's chat or placeholder\n   - \"Select a group to start chatting\" when none selected\n\n5. **Props**: The interfaces are provided\n\nI need to use shadcn/ui components (Card, Input, Badge, ScrollArea, Skeleton), TypeScript, and Tailwind CSS with mobile-first responsive design.\n\nLet me structure this:\n1. Main MessagingDashboard component\n2. ConnectionStatus component\n3. GroupsList component  \n4. GroupCard component\n5. ChatArea component\n6. Helper functions for time formatting\n\nI'll need to handle:\n- Mobile vs desktop layouts\n- Loading states with skeletons\n- Empty states\n- Time formatting\n- Avatar fallbacks\n- Responsive design\n- Connection status styling\n</Thinking>\n\nI'll create a comprehensive messaging dashboard with a mobile-first responsive design. Let me build this step by step with all the required components.\n\n```tsx file=\"components/messaging-dashboard.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { Button } from '@/components/ui/button'\nimport { Search, Plus, MessageCircle, Users, ArrowLeft } from 'lucide-react'\n\ninterface Group {\n  id: number\n  name: string\n  memberCount: number\n  lastMessage?: string\n  lastMessageTime?: Date\n  unreadCount: number\n}\n\ninterface MessagingDashboardProps {\n  groups: Group[]\n  selectedGroupId?: number\n  connectionStatus: { connected: boolean; authenticated: boolean }\n  onGroupSelect: (group: Group) => void\n  onCreateGroup: () => void\n  currentUserId: string\n  isLoading?: boolean\n}\n\nfunction formatTimeAgo(date: Date): string {\n  const now = new Date()\n  const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60))\n  \n  if (diffInMinutes < 1) return 'now'\n  if (diffInMinutes < 60) return `${diffInMinutes}m`\n  \n  const diffInHours = Math.floor(diffInMinutes / 60)\n  if (diffInHours < 24) return `${diffInHours}h`\n  \n  const diffInDays = Math.floor(diffInHours / 24)\n  if (diffInDays === 1) return 'Yesterday'\n  if (diffInDays < 7) return `${diffInDays}d`\n  \n  return date.toLocaleDateString()\n}\n\nfunction getGroupInitials(name: string): string {\n  return name\n    .split(' ')\n    .map(word => word.charAt(0))\n    .join('')\n    .toUpperCase()\n    .slice(0, 2)\n}\n\nfunction ConnectionStatus({ \n  connectionStatus \n}: { \n  connectionStatus: { connected: boolean; authenticated: boolean } \n}) {\n  const getStatusConfig = () => {\n    if (connectionStatus.connected && connectionStatus.authenticated) {\n      return {\n        color: 'bg-green-500',\n        text: 'Connected',\n        textColor: 'text-green-700'\n      }\n    } else if (connectionStatus.connected && !connectionStatus.authenticated) {\n      return {\n        color: 'bg-yellow-500',\n        text: 'Connecting...',\n        textColor: 'text-yellow-700'\n      }\n    } else {\n      return {\n        color: 'bg-red-500',\n        text: 'Offline',\n        textColor: 'text-red-700'\n      }\n    }\n  }\n\n  const status = getStatusConfig()\n\n  return (\n    <div className=\"flex items-center gap-2 px-3 py-2 bg-muted/30 border-b\">\n      <div className={`w-2 h-2 rounded-full ${status.color}`} />\n      <span className={`text-xs font-medium ${status.textColor}`}>\n        {status.text}\n      </span>\n    </div>\n  )\n}\n\nfunction GroupCard({ \n  group, \n  isSelected, \n  onClick \n}: { \n  group: Group\n  isSelected: boolean\n  onClick: () => void \n}) {\n  return (\n    <Card \n      className={`cursor-pointer transition-colors hover:bg-muted/50 ${\n        isSelected ? 'bg-muted border-primary' : ''\n      }`}\n      onClick={onClick}\n    >\n      <CardContent className=\"p-3\">\n        <div className=\"flex items-start gap-3\">\n          {/* Group Avatar */}\n          <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n            <span className=\"text-sm font-semibold text-primary\">\n              {getGroupInitials(group.name)}\n            </span>\n          </div>\n          \n          {/* Group Info */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between mb-1\">\n              <div className=\"flex items-center gap-2\">\n                <h3 className=\"font-semibold text-sm truncate\">{group.name}</h3>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {group.memberCount}\n                </Badge>\n              </div>\n              <div className=\"flex items-center gap-2 flex-shrink-0\">\n                {group.lastMessageTime && (\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatTimeAgo(group.lastMessageTime)}\n                  </span>\n                )}\n                {group.unreadCount > 0 && (\n                  <Badge variant=\"destructive\" className=\"text-xs min-w-[20px] h-5 flex items-center justify-center\">\n                    {group.unreadCount > 99 ? '99+' : group.unreadCount}\n                  </Badge>\n                )}\n              </div>\n            </div>\n            \n            {/* Last Message Preview */}\n            {group.lastMessage && (\n              <p className=\"text-sm text-muted-foreground line-clamp-2 leading-tight\">\n                {group.lastMessage}\n              </p>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction GroupsList({ \n  groups, \n  selectedGroupId, \n  onGroupSelect, \n  onCreateGroup,\n  isLoading \n}: {\n  groups: Group[]\n  selectedGroupId?: number\n  onGroupSelect: (group: Group) => void\n  onCreateGroup: () => void\n  isLoading?: boolean\n}) {\n  const [searchQuery, setSearchQuery] = useState('')\n\n  const filteredGroups = groups.filter(group =>\n    group.name.toLowerCase().includes(searchQuery.toLowerCase())\n  )\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-3\">\n        {/* Search Skeleton */}\n        <Skeleton className=\"h-10 w-full\" />\n        \n        {/* Group Card Skeletons */}\n        {Array.from({ length: 5 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-3\">\n              <div className=\"flex items-start gap-3\">\n                <Skeleton className=\"w-10 h-10 rounded-full\" />\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Skeleton className=\"h-4 w-24\" />\n                    <Skeleton className=\"h-4 w-8\" />\n                  </div>\n                  <Skeleton className=\"h-3 w-full\" />\n                  <Skeleton className=\"h-3 w-3/4\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Search Input */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n        <Input\n          placeholder=\"Search groups...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-10\"\n        />\n      </div>\n\n      {/* Create Group Button */}\n      <Button \n        onClick={onCreateGroup}\n        className=\"w-full\"\n        variant=\"outline\"\n      >\n        <Plus className=\"w-4 h-4 mr-2\" />\n        Create Group\n      </Button>\n\n      {/* Groups List */}\n      <ScrollArea className=\"h-[calc(100vh-200px)]\">\n        <div className=\"space-y-2\">\n          {filteredGroups.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n              <h3 className=\"font-semibold text-muted-foreground mb-1\">\n                {searchQuery ? 'No groups found' : 'No groups yet'}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {searchQuery \n                  ? 'Try adjusting your search terms' \n                  : 'Create your first group to get started'\n                }\n              </p>\n            </div>\n          ) : (\n            filteredGroups.map((group) => (\n              <GroupCard\n                key={group.id}\n                group={group}\n                isSelected={selectedGroupId === group.id}\n                onClick={() => onGroupSelect(group)}\n              />\n            ))\n          )}\n        </div>\n      </ScrollArea>\n    </div>\n  )\n}\n\nfunction ChatArea({ \n  selectedGroup \n}: { \n  selectedGroup?: Group \n}) {\n  if (!selectedGroup) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-muted/20\">\n        <div className=\"text-center\">\n          <MessageCircle className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n            Select a group to start chatting\n          </h3>\n          <p className=\"text-muted-foreground\">\n            Choose a group from the sidebar to view your conversation\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Chat Header */}\n      <div className=\"border-b p-4 bg-background\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n            <span className=\"text-sm font-semibold text-primary\">\n              {getGroupInitials(selectedGroup.name)}\n            </span>\n          </div>\n          <div>\n            <h2 className=\"font-semibold\">{selectedGroup.name}</h2>\n            <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n              <Users className=\"w-3 h-3\" />\n              <span>{selectedGroup.memberCount} members</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Chat Messages Area */}\n      <div className=\"flex-1 p-4 bg-muted/20\">\n        <div className=\"text-center text-muted-foreground\">\n          <MessageCircle className=\"w-8 h-8 mx-auto mb-2\" />\n          <p>Chat interface would go here</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default function MessagingDashboard({\n  groups,\n  selectedGroupId,\n  connectionStatus,\n  onGroupSelect,\n  onCreateGroup,\n  currentUserId,\n  isLoading = false\n}: MessagingDashboardProps) {\n  const [showMobileChat, setShowMobileChat] = useState(false)\n  const selectedGroup = groups.find(g => g.id === selectedGroupId)\n\n  const handleGroupSelect = (group: Group) => {\n    onGroupSelect(group)\n    setShowMobileChat(true)\n  }\n\n  const handleBackToGroups = () => {\n    setShowMobileChat(false)\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background\">\n      {/* Connection Status Header */}\n      <ConnectionStatus connectionStatus={connectionStatus} />\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Mobile Layout */}\n        <div className=\"md:hidden w-full\">\n          {!showMobileChat ? (\n            /* Groups List - Mobile */\n            <div className=\"h-full p-4\">\n              <GroupsList\n                groups={groups}\n                selectedGroupId={selectedGroupId}\n                onGroupSelect={handleGroupSelect}\n                onCreateGroup={onCreateGroup}\n                isLoading={isLoading}\n              />\n            </div>\n          ) : (\n            /* Chat Area - Mobile */\n            <div className=\"h-full flex flex-col\">\n              {/* Mobile Chat Header with Back Button */}\n              <div className=\"border-b p-4 bg-background\">\n                <div className=\"flex items-center gap-3\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleBackToGroups}\n                    className=\"p-2\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4\" />\n                  </Button>\n                  {selectedGroup && (\n                    <>\n                      <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <span className=\"text-sm font-semibold text-primary\">\n                          {getGroupInitials(selectedGroup.name)}\n                        </span>\n                      </div>\n                      <div>\n                        <h2 className=\"font-semibold\">{selectedGroup.name}</h2>\n                        <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                          <Users className=\"w-3 h-3\" />\n                          <span>{selectedGroup.memberCount} members</span>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n              \n              {/* Mobile Chat Content */}\n              <div className=\"flex-1 p-4 bg-muted/"
        },
        "finish_reason": "stop"
      }
    ],
    "usage": {
      "prompt_tokens": 6665,
      "completion_tokens": 4000,
      "total_tokens": 10665,
      "prompt_tokens_details": {
        "cached_tokens": 0,
        "audio_tokens": 0
      },
      "completion_tokens_details": {
        "reasoning_tokens": 0,
        "audio_tokens": 0,
        "accepted_prediction_tokens": 0,
        "rejected_prediction_tokens": 0
      }
    },
    "service_tier": "default",
    "system_fingerprint": "fp-SjJ0GCYp4KC8rDopV1y3Dm1uhjgXtmdW"
  },
  "code": "<Thinking>\nI need to create a comprehensive messaging dashboard for an employee directory PWA. Let me break down the requirements:\n\n1. **Layout**: \n   - Desktop: Split view (1/3 groups list, 2/3 chat area)\n   - Mobile: Full screen views with navigation\n   - Header with connection status and create group button\n\n2. **Groups List**:\n   - Group cards with name, member count badge, last message preview (max 2 lines), unread count badge, time ago, group avatar with fallback initials\n   - Search/filter input at top\n   - Loading skeletons\n   - Empty state\n\n3. **Connection Status**:\n   - Green dot + \"Connected\" when online\n   - Yellow dot + \"Connecting...\" when connecting  \n   - Red dot + \"Offline\" when disconnected\n   - Minimal height, subtle styling\n\n4. **Chat Area**:\n   - Show selected group's chat or placeholder\n   - \"Select a group to start chatting\" when none selected\n\n5. **Props**: The interfaces are provided\n\nI need to use shadcn/ui components (Card, Input, Badge, ScrollArea, Skeleton), TypeScript, and Tailwind CSS with mobile-first responsive design.\n\nLet me structure this:\n1. Main MessagingDashboard component\n2. ConnectionStatus component\n3. GroupsList component  \n4. GroupCard component\n5. ChatArea component\n6. Helper functions for time formatting\n\nI'll need to handle:\n- Mobile vs desktop layouts\n- Loading states with skeletons\n- Empty states\n- Time formatting\n- Avatar fallbacks\n- Responsive design\n- Connection status styling\n</Thinking>\n\nI'll create a comprehensive messaging dashboard with a mobile-first responsive design. Let me build this step by step with all the required components.\n\n```tsx file=\"components/messaging-dashboard.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { Button } from '@/components/ui/button'\nimport { Search, Plus, MessageCircle, Users, ArrowLeft } from 'lucide-react'\n\ninterface Group {\n  id: number\n  name: string\n  memberCount: number\n  lastMessage?: string\n  lastMessageTime?: Date\n  unreadCount: number\n}\n\ninterface MessagingDashboardProps {\n  groups: Group[]\n  selectedGroupId?: number\n  connectionStatus: { connected: boolean; authenticated: boolean }\n  onGroupSelect: (group: Group) => void\n  onCreateGroup: () => void\n  currentUserId: string\n  isLoading?: boolean\n}\n\nfunction formatTimeAgo(date: Date): string {\n  const now = new Date()\n  const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60))\n  \n  if (diffInMinutes < 1) return 'now'\n  if (diffInMinutes < 60) return `${diffInMinutes}m`\n  \n  const diffInHours = Math.floor(diffInMinutes / 60)\n  if (diffInHours < 24) return `${diffInHours}h`\n  \n  const diffInDays = Math.floor(diffInHours / 24)\n  if (diffInDays === 1) return 'Yesterday'\n  if (diffInDays < 7) return `${diffInDays}d`\n  \n  return date.toLocaleDateString()\n}\n\nfunction getGroupInitials(name: string): string {\n  return name\n    .split(' ')\n    .map(word => word.charAt(0))\n    .join('')\n    .toUpperCase()\n    .slice(0, 2)\n}\n\nfunction ConnectionStatus({ \n  connectionStatus \n}: { \n  connectionStatus: { connected: boolean; authenticated: boolean } \n}) {\n  const getStatusConfig = () => {\n    if (connectionStatus.connected && connectionStatus.authenticated) {\n      return {\n        color: 'bg-green-500',\n        text: 'Connected',\n        textColor: 'text-green-700'\n      }\n    } else if (connectionStatus.connected && !connectionStatus.authenticated) {\n      return {\n        color: 'bg-yellow-500',\n        text: 'Connecting...',\n        textColor: 'text-yellow-700'\n      }\n    } else {\n      return {\n        color: 'bg-red-500',\n        text: 'Offline',\n        textColor: 'text-red-700'\n      }\n    }\n  }\n\n  const status = getStatusConfig()\n\n  return (\n    <div className=\"flex items-center gap-2 px-3 py-2 bg-muted/30 border-b\">\n      <div className={`w-2 h-2 rounded-full ${status.color}`} />\n      <span className={`text-xs font-medium ${status.textColor}`}>\n        {status.text}\n      </span>\n    </div>\n  )\n}\n\nfunction GroupCard({ \n  group, \n  isSelected, \n  onClick \n}: { \n  group: Group\n  isSelected: boolean\n  onClick: () => void \n}) {\n  return (\n    <Card \n      className={`cursor-pointer transition-colors hover:bg-muted/50 ${\n        isSelected ? 'bg-muted border-primary' : ''\n      }`}\n      onClick={onClick}\n    >\n      <CardContent className=\"p-3\">\n        <div className=\"flex items-start gap-3\">\n          {/* Group Avatar */}\n          <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n            <span className=\"text-sm font-semibold text-primary\">\n              {getGroupInitials(group.name)}\n            </span>\n          </div>\n          \n          {/* Group Info */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between mb-1\">\n              <div className=\"flex items-center gap-2\">\n                <h3 className=\"font-semibold text-sm truncate\">{group.name}</h3>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {group.memberCount}\n                </Badge>\n              </div>\n              <div className=\"flex items-center gap-2 flex-shrink-0\">\n                {group.lastMessageTime && (\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatTimeAgo(group.lastMessageTime)}\n                  </span>\n                )}\n                {group.unreadCount > 0 && (\n                  <Badge variant=\"destructive\" className=\"text-xs min-w-[20px] h-5 flex items-center justify-center\">\n                    {group.unreadCount > 99 ? '99+' : group.unreadCount}\n                  </Badge>\n                )}\n              </div>\n            </div>\n            \n            {/* Last Message Preview */}\n            {group.lastMessage && (\n              <p className=\"text-sm text-muted-foreground line-clamp-2 leading-tight\">\n                {group.lastMessage}\n              </p>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction GroupsList({ \n  groups, \n  selectedGroupId, \n  onGroupSelect, \n  onCreateGroup,\n  isLoading \n}: {\n  groups: Group[]\n  selectedGroupId?: number\n  onGroupSelect: (group: Group) => void\n  onCreateGroup: () => void\n  isLoading?: boolean\n}) {\n  const [searchQuery, setSearchQuery] = useState('')\n\n  const filteredGroups = groups.filter(group =>\n    group.name.toLowerCase().includes(searchQuery.toLowerCase())\n  )\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-3\">\n        {/* Search Skeleton */}\n        <Skeleton className=\"h-10 w-full\" />\n        \n        {/* Group Card Skeletons */}\n        {Array.from({ length: 5 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-3\">\n              <div className=\"flex items-start gap-3\">\n                <Skeleton className=\"w-10 h-10 rounded-full\" />\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Skeleton className=\"h-4 w-24\" />\n                    <Skeleton className=\"h-4 w-8\" />\n                  </div>\n                  <Skeleton className=\"h-3 w-full\" />\n                  <Skeleton className=\"h-3 w-3/4\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Search Input */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n        <Input\n          placeholder=\"Search groups...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-10\"\n        />\n      </div>\n\n      {/* Create Group Button */}\n      <Button \n        onClick={onCreateGroup}\n        className=\"w-full\"\n        variant=\"outline\"\n      >\n        <Plus className=\"w-4 h-4 mr-2\" />\n        Create Group\n      </Button>\n\n      {/* Groups List */}\n      <ScrollArea className=\"h-[calc(100vh-200px)]\">\n        <div className=\"space-y-2\">\n          {filteredGroups.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n              <h3 className=\"font-semibold text-muted-foreground mb-1\">\n                {searchQuery ? 'No groups found' : 'No groups yet'}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {searchQuery \n                  ? 'Try adjusting your search terms' \n                  : 'Create your first group to get started'\n                }\n              </p>\n            </div>\n          ) : (\n            filteredGroups.map((group) => (\n              <GroupCard\n                key={group.id}\n                group={group}\n                isSelected={selectedGroupId === group.id}\n                onClick={() => onGroupSelect(group)}\n              />\n            ))\n          )}\n        </div>\n      </ScrollArea>\n    </div>\n  )\n}\n\nfunction ChatArea({ \n  selectedGroup \n}: { \n  selectedGroup?: Group \n}) {\n  if (!selectedGroup) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-muted/20\">\n        <div className=\"text-center\">\n          <MessageCircle className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n            Select a group to start chatting\n          </h3>\n          <p className=\"text-muted-foreground\">\n            Choose a group from the sidebar to view your conversation\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Chat Header */}\n      <div className=\"border-b p-4 bg-background\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n            <span className=\"text-sm font-semibold text-primary\">\n              {getGroupInitials(selectedGroup.name)}\n            </span>\n          </div>\n          <div>\n            <h2 className=\"font-semibold\">{selectedGroup.name}</h2>\n            <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n              <Users className=\"w-3 h-3\" />\n              <span>{selectedGroup.memberCount} members</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Chat Messages Area */}\n      <div className=\"flex-1 p-4 bg-muted/20\">\n        <div className=\"text-center text-muted-foreground\">\n          <MessageCircle className=\"w-8 h-8 mx-auto mb-2\" />\n          <p>Chat interface would go here</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default function MessagingDashboard({\n  groups,\n  selectedGroupId,\n  connectionStatus,\n  onGroupSelect,\n  onCreateGroup,\n  currentUserId,\n  isLoading = false\n}: MessagingDashboardProps) {\n  const [showMobileChat, setShowMobileChat] = useState(false)\n  const selectedGroup = groups.find(g => g.id === selectedGroupId)\n\n  const handleGroupSelect = (group: Group) => {\n    onGroupSelect(group)\n    setShowMobileChat(true)\n  }\n\n  const handleBackToGroups = () => {\n    setShowMobileChat(false)\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background\">\n      {/* Connection Status Header */}\n      <ConnectionStatus connectionStatus={connectionStatus} />\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Mobile Layout */}\n        <div className=\"md:hidden w-full\">\n          {!showMobileChat ? (\n            /* Groups List - Mobile */\n            <div className=\"h-full p-4\">\n              <GroupsList\n                groups={groups}\n                selectedGroupId={selectedGroupId}\n                onGroupSelect={handleGroupSelect}\n                onCreateGroup={onCreateGroup}\n                isLoading={isLoading}\n              />\n            </div>\n          ) : (\n            /* Chat Area - Mobile */\n            <div className=\"h-full flex flex-col\">\n              {/* Mobile Chat Header with Back Button */}\n              <div className=\"border-b p-4 bg-background\">\n                <div className=\"flex items-center gap-3\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleBackToGroups}\n                    className=\"p-2\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4\" />\n                  </Button>\n                  {selectedGroup && (\n                    <>\n                      <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <span className=\"text-sm font-semibold text-primary\">\n                          {getGroupInitials(selectedGroup.name)}\n                        </span>\n                      </div>\n                      <div>\n                        <h2 className=\"font-semibold\">{selectedGroup.name}</h2>\n                        <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                          <Users className=\"w-3 h-3\" />\n                          <span>{selectedGroup.memberCount} members</span>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n              \n              {/* Mobile Chat Content */}\n              <div className=\"flex-1 p-4 bg-muted/",
  "timestamp": "2025-07-19T12:00:02.835Z"
}