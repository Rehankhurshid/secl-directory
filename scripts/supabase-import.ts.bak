import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { employees, departments, areas, designations } from '../src/lib/database/schema';
import * as fs from 'fs';
import * as path from 'path';
import { parse } from 'csv-parse/sync';
import * as dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const connectionString = process.env.DATABASE_URL!;
const sql = postgres(connectionString);
const db = drizzle(sql);

function parseDate(dateStr: string): string | null {
  if (!dateStr || dateStr === 'null' || dateStr === '') return null;
  
  // Handle MM/DD/YYYY format
  const match = dateStr.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
  if (match) {
    const [, month, day, year] = match;
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
  }
  
  return null;
}

function clean(value: string): string | null {
  if (!value || value === 'null' || value.trim() === '') return null;
  return value.trim();
}

async function importData() {
  try {
    console.log('üöÄ Starting Supabase import...\n');
    
    // Read and parse CSV
    const csvPath = path.join(process.cwd(), 'instructions', 'employee-sheet.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    const records = parse(csvContent, {
      columns: true,
      skip_empty_lines: true,
      trim: true,
    });
    
    console.log(`üìä Found ${records.length} employee records\n`);
    
    // Step 1: Import Departments
    console.log('1Ô∏è‚É£ Importing departments...');
    const deptMap = new Map();
    records.forEach(r => {
      if (r.dept_code && r.dept && r.dept !== 'null') {
        deptMap.set(r.dept_code, r.dept);
      }
    });
    
    let deptCount = 0;
    for (const [code, name] of deptMap) {
      try {
        await db.insert(departments).values({
          deptCode: code,
          name: name,
          isActive: true,
        }).onConflictDoNothing();
        deptCount++;
      } catch (e) {
        // Ignore duplicate errors
      }
    }
    console.log(`‚úÖ Imported ${deptCount} departments\n`);
    
    // Step 2: Import Areas
    console.log('2Ô∏è‚É£ Importing areas...');
    const areaMap = new Map();
    records.forEach(r => {
      if (r.unit_code && r.area_name) {
        areaMap.set(r.unit_code, {
          areaName: r.area_name,
          unitName: r.unit_name || r.area_name
        });
      }
    });
    
    let areaCount = 0;
    for (const [code, data] of areaMap) {
      try {
        await db.insert(areas).values({
          unitCode: code,
          areaName: data.areaName,
          unitName: data.unitName,
          isActive: true,
        }).onConflictDoNothing();
        areaCount++;
      } catch (e) {
        // Ignore duplicate errors
      }
    }
    console.log(`‚úÖ Imported ${areaCount} areas\n`);
    
    // Step 3: Import Designations
    console.log('3Ô∏è‚É£ Importing designations...');
    const desigMap = new Map();
    records.forEach(r => {
      if (r.designation && r.designation !== 'null') {
        desigMap.set(r.designation, {
          grade: r.grade,
          category: r.category,
          discipline: r.discipline
        });
      }
    });
    
    let desigCount = 0;
    for (const [title, data] of desigMap) {
      try {
        await db.insert(designations).values({
          title: title,
          grade: clean(data.grade),
          category: clean(data.category),
          discipline: clean(data.discipline),
          isActive: true,
        }).onConflictDoNothing();
        desigCount++;
      } catch (e) {
        // Ignore duplicate errors
      }
    }
    console.log(`‚úÖ Imported ${desigCount} designations\n`);
    
    // Step 4: Import Employees
    console.log('4Ô∏è‚É£ Importing employees...');
    let empCount = 0;
    let errors = 0;
    const batchSize = 100;
    
    for (let i = 0; i < records.length; i += batchSize) {
      const batch = records.slice(i, i + batchSize);
      
      for (const r of batch) {
        try {
          await db.insert(employees).values({
            empCode: r.emp_code,
            name: r.name,
            fatherName: clean(r.father_name),
            dob: parseDate(r.dob),
            gender: clean(r.gender),
            emailId: clean(r.email_id),
            phoneNumber1: clean(r.phno_1),
            phoneNumber2: clean(r.phno_2),
            permanentAddress: clean(r.permanent_address),
            presentAddress: clean(r.present_address),
            designation: clean(r.designation),
            category: clean(r.category),
            grade: clean(r.grade),
            discipline: clean(r.discipline),
            dateOfAppointment: parseDate(r.dt_appt),
            areaJoiningDate: parseDate(r.area_joining_date),
            gradeJoiningDate: parseDate(r.grade_joining_date),
            incrementDate: parseDate(r.incr_date),
            expectedExitDate: parseDate(r.expected_exit_date),
            companyPostingDate: parseDate(r.company_posting_date),
            areaName: clean(r.area_name),
            unitCode: clean(r.unit_code),
            unitName: clean(r.unit_name),
            deptCode: clean(r.dept_code),
            department: clean(r.dept),
            subDepartment: clean(r.sub_dept),
            bloodGroup: clean(r.blood),
            casteCode: clean(r.caste_code),
            religionCode: clean(r.religion_code),
            maritalStatusCode: clean(r.marital_status_code),
            spouseName: clean(r.spouse_name),
            spouseEmpCode: clean(r.spouse_emp_code),
            bankAccountNo: clean(r.bank_acc_no),
            bankName: clean(r.bank),
            basicSalary: clean(r.basic),
            hra: clean(r.hra),
            ncwaBasic: clean(r.ncwa_basic),
            aadhaarNo: clean(r.aadhaar),
            panNo: clean(r.pan_no),
            isActive: true,
            payFlag: r.pay_flag || 'Y',
          }).onConflictDoNothing();
          
          empCount++;
          if (empCount % 100 === 0) {
            console.log(`  Progress: ${empCount}/${records.length}`);
          }
        } catch (e: any) {
          errors++;
          if (errors < 5) {
            console.error(`  Error with ${r.emp_code}:`, e.message);
          }
        }
      }
    }
    
    console.log(`\n‚úÖ Import completed!`);
    console.log(`  - Employees imported: ${empCount}`);
    console.log(`  - Errors: ${errors}`);
    
    // Verify import
    const count = await sql`SELECT COUNT(*) as count FROM employees`;
    console.log(`\nüìä Total employees in database: ${count[0].count}`);
    
  } catch (error) {
    console.error('üí• Import failed:', error);
  } finally {
    await sql.end();
  }
}

importData();